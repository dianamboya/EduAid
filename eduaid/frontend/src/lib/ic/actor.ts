// /* eslint-disable @typescript-eslint/ban-ts-comment */
// import { HttpAgent, Actor } from "@dfinity/agent";
// import { AuthClient } from "@dfinity/auth-client";
// // @ts-ignore - generated by `dfx generate`
// import { idlFactory as userProfilesIDL } from "../../declarations/user_profiles/user_profiles.did.js";
// // @ts-ignore
// import canisterIds from "../../../canister_ids.json";


// export type CreateActorOpts = { identity?: any };


// export async function getAuthClient() {
// return await AuthClient.create();
// }


// export async function createUserProfilesActor(opts: CreateActorOpts = {}) {
// const { identity } = opts;
// const agent = new HttpAgent({ identity });
// if (process.env.NODE_ENV !== "production") {
// // Why: Local replica needs root key for certificate validation.
// await agent.fetchRootKey().catch(() => undefined);
// }
// const canisterId = (canisterIds as any).user_profiles.local ?? (canisterIds as any).user_profiles.ic;
// return Actor.createActor(userProfilesIDL, { agent, canisterId });
// }

import { Actor, HttpAgent } from "@dfinity/agent";
import { IDL } from "@dfinity/candid";


// Replace with your deployed canister ID
env: any;
export const CHAT_CANISTER_ID = (globalThis as any).CHAT_CANISTER_ID || import.meta.env.VITE_CHAT_CANISTER_ID;


export const idlFactory = ({ IDL }: { IDL: typeof import("@dfinity/candid").IDL }) => {
const Message = IDL.Record({ sender: IDL.Variant({ user: IDL.Null, bot: IDL.Null }), text: IDL.Text, at: IDL.Nat64 });
const Reply = IDL.Record({ reply: IDL.Text, suggestions: IDL.Vec(IDL.Text) });
return IDL.Service({
sendWebMessage: IDL.Func([IDL.Text], [Reply], []),
history: IDL.Func([IDL.Nat], [IDL.Vec(Message)], ["query"]),
linkWhatsApp: IDL.Func([IDL.Text], [], []),
sendWhatsAppViaProxy: IDL.Func([IDL.Text, IDL.Text, IDL.Text, IDL.Opt(IDL.Text)], [IDL.Record({ status: IDL.Nat, body: IDL.Text })], []),
});
};


export function createChatActor() {
const agent = new HttpAgent({ host: import.meta.env.VITE_DFX_NETWORK === "ic" ? "https://ic0.app" : "http://127.0.0.1:4943" });
if (import.meta.env.DEV) agent.fetchRootKey(); // Why: local dev trust
return Actor.createActor(idlFactory({ IDL }), { agent, canisterId: CHAT_CANISTER_ID });
}